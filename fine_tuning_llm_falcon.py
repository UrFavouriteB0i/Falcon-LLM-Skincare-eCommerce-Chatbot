# -*- coding: utf-8 -*-
"""fine-tuning-llm-falcon.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ny3nRgFfNz5U17FPkJfURvGSRU-b7JPf
"""

!pip install torch transformers accelerate bitsandbytes wandb einops datasets peft trl

!pip install flash-attn

!pip freeze > requirements.txt

import torch
import time
import pandas as pd
from huggingface_hub import login
from datasets import load_dataset
from transformers import AutoModelForCausalLM, AutoTokenizer, BitsAndBytesConfig, AutoTokenizer, GenerationConfig
from peft import LoraConfig, get_peft_model, PeftConfig, PeftModel, prepare_model_for_kbit_training
from transformers import TrainingArguments
from trl import SFTTrainer

#ignore warnings
import warnings
warnings.filterwarnings("ignore")

model_name = "tiiuae/falcon-7b"

bnb_config = BitsAndBytesConfig(
    load_in_4bit=True,
    bnb_4bit_quant_type="nf4",
    bnb_4bit_use_double_quant=True,
    bnb_4bit_compute_dtype=torch.float16,
)

model = AutoModelForCausalLM.from_pretrained(
    model_name,
    quantization_config=bnb_config,
    device_map="auto",
    trust_remote_code=True
)
model.config.use_cache = False

tokenizer = AutoTokenizer.from_pretrained(model_name, trust_remote_code=True)
tokenizer.pad_token = tokenizer.eos_token

model = prepare_model_for_kbit_training(model)

lora_alpha = 16 #16
lora_dropout = 0.05 #0.1
lora_rank = 32 #64

peft_config = LoraConfig(
    lora_alpha=lora_alpha,
    lora_dropout=lora_dropout,
    r=lora_rank,
    bias="none",
    task_type="CAUSAL_LM",
    target_modules=[
        "query_key_value",
        "dense",
        "dense_h_to_4h",
        "dense_4h_to_h",
    ]
)

peft_model = get_peft_model(model, peft_config)

data = load_dataset("UrFavB0i/skincare-ecommerce-FAQ")
data

def combine_dialogues(buyer, assistant):
    combined = ""
    for b, a in zip(buyer, assistant):
        combined += f"<HUMAN>: {b} <ASSISTANT>: {a} "
    return combined.strip()

# Transform the dataset
def transform_dataset(dataset):
    dialogues = [combine_dialogues(buyer, assistant) for buyer, assistant in zip(dataset['Buyer'], dataset['AI Assistant'])]
    return Dataset.from_dict({'text': dialogues})

from datasets import DatasetDict, Dataset
new_dataset_dict = DatasetDict({
    'train': transform_dataset(data['train']),
    'test': transform_dataset(data['test'])
})

new_dataset_dict

def tokenize_function(examples):
    return tokenizer(examples["text"], truncation=True, padding="max_length", max_length=256)

tokenized_datasets = new_dataset_dict.map(tokenize_function, batched=True)

output_dir = "falcon7binstruct_ecommercebot"
per_device_train_batch_size = 4
gradient_accumulation_steps = 4
optim = "paged_adamw_32bit"
save_steps = 10
logging_steps = 1
learning_rate = 3e-4
max_grad_norm = 0.3
max_steps = 120 #100 #500
warmup_ratio = 0.05
lr_scheduler_type = "cosine" #"constant"

training_arguments = TrainingArguments(
    output_dir=output_dir,
    per_device_train_batch_size=per_device_train_batch_size,
    gradient_accumulation_steps=gradient_accumulation_steps,
    optim=optim,
    save_steps=save_steps,
    logging_steps=logging_steps,
    learning_rate=learning_rate,
    fp16=True,
    max_grad_norm=max_grad_norm,
    max_steps=max_steps,
    warmup_ratio=warmup_ratio,
    group_by_length=True,
    lr_scheduler_type=lr_scheduler_type,
    push_to_hub=True
)

from huggingface_hub import login
login()

max_seq_length = 256

trainer = SFTTrainer(
    model=peft_model,
    train_dataset=tokenized_datasets['train'],
    peft_config=peft_config,
    dataset_text_field="text",
    max_seq_length=max_seq_length,
    tokenizer=tokenizer,
    args=training_arguments,
)

for name, module in trainer.model.named_modules():
    if "norm" in name:
        module = module.to(torch.bfloat16)

peft_model.config.use_cache = False
trainer.train()

trainer.push_to_hub()